Program ::= ( ClassDeclaration )* MainDeclaration

ClassDeclaration ::= class Identifier (extends Identifier)? {(VarDeclaration)* Expression (; Expression)*}

MainDeclaration	::=	object Identifier extends Identifier { ( VarDeclaration )* Expression ( ; Expression)* }

MethodDeclaration	::=	( override )? def Identifier ( ( Identifier : Type ( , Identifier : Type ) * )? ) : Type = { ( VarDeclaration )* Expression ( ; Expression)* }

VarDeclaration	::=	var Identifier : Type = Expression ;

Type	::=	Boolean | Int | String | Unit | Identifier

Expression	::=	Expression ( && | || | == | < | + | - | * | / ) Expression 
			| Expression . Identifier ( ( Expression ( , Expression )* )? ) 
			| <INTEGER_LITERAL> 
			| " <STRING_LITERAL> " 
			| true 
			| false 
			| Identifier 
			| this 
			| null 
			| new Identifier ( ) 
			| ! Expression 
			| ( Expression ) 
			| { ( Expression ( ; Expression )* )? } 
			| if ( Expression ) Expression ( else Expression )? 
			| while ( Expression ) Expression 
			| println ( Expression ) 
			| Identifier = Expression

Identifier	::=	<IDENTIFIER>