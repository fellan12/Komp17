class Arr {
  def ofDim(i : Int) : Arr = {
  if (0 == i)
 new Empty()
   else
 new Cons().init(0, this.ofDim((i - 1)))
}
  def update(index : Int, newval : Int) : Unit = {
{

  }
}
  def apply(index : Int) : Int = {
0
}
  def size() : Int = {
0
}
}
class Empty extends Arr {
}
class Cons extends Arr {
    var value : Int = 0;
    var next : Arr = new Empty();
  def init(x : Int, ne : Arr) : Cons = {
  value = x;
next = ne;
this
}
  override def update(index : Int, newval : Int) : Unit = {
  if (0 == index)
 value = newval
   else
 next.update((index - 1), newval)
}
  override def apply(index : Int) : Int = {
  if (0 == index)
 value
   else
 next.apply((index - 1))
}
  override def size() : Int = {
(1 + next.size())
}
}
class Matrix {
    var elements : Arr = null;
    var cols : Int = 0;
  def init(n : Int, m : Int) : Matrix = {
  cols = m;
elements = new Arr().ofDim((n * m));
this
}
  def unfold(i : Int, j : Int) : Int = {
((cols * (i - 1)) + (j - 1))
}
  def index(i : Int, j : Int) : Int = {
elements.apply(this.unfold(i, j))
}
  def assign(i : Int, j : Int, x : Int) : Int = {
  elements.update(this.unfold(i, j), x);
x
}
}
class Board {
    var cells : Matrix = null;
    var rows : Int = 0;
    var cols : Int = 0;
  def init(n : Int, m : Int) : Board = {
  var i : Int = 0;
  var j : Int = 0;
  var bitbucket : Int = 0;
  cells = new Matrix().init(n, m);
rows = n;
cols = m;
i = 1;
j = 1;
  while (i < rows || i == rows) {
    while (j < cols || j == cols) {
  bitbucket = this.kill(i, j);
j = (j + 1)
  };
i = (i + 1);
j = 1
  };
this
}
  def alive(i : Int, j : Int) : Boolean = {
cells.index(i, j) == 1
}
  def modulo(left : Int, right : Int) : Int = {
  var m : Int = (left - (right * (left / right)));
    if (m == 0)
 m = right
 ;
m
}
  def vmodulo(n : Int) : Int = {
this.modulo(n, rows)
}
  def hmodulo(n : Int) : Int = {
this.modulo(n, cols)
}
  def n_neighbour(i : Int, j : Int) : Int = {
cells.index(this.vmodulo((i - 1)), this.hmodulo(j))
}
  def ne_neighbour(i : Int, j : Int) : Int = {
cells.index(this.vmodulo((i - 1)), this.hmodulo((j + 1)))
}
  def nw_neighbour(i : Int, j : Int) : Int = {
cells.index(this.vmodulo((i - 1)), this.hmodulo((j - 1)))
}
  def e_neighbour(i : Int, j : Int) : Int = {
cells.index(this.vmodulo(i), this.hmodulo((j - 1)))
}
  def w_neighbour(i : Int, j : Int) : Int = {
cells.index(this.vmodulo(i), this.hmodulo((j + 1)))
}
  def s_neighbour(i : Int, j : Int) : Int = {
cells.index(this.vmodulo((i + 1)), this.hmodulo(j))
}
  def se_neighbour(i : Int, j : Int) : Int = {
cells.index(this.vmodulo((i + 1)), this.hmodulo((j + 1)))
}
  def sw_neighbour(i : Int, j : Int) : Int = {
cells.index(this.vmodulo((i + 1)), this.hmodulo((j - 1)))
}
  def neighbours(i : Int, j : Int) : Int = {
(((((((this.nw_neighbour(i, j) + this.n_neighbour(i, j)) + this.ne_neighbour(i, j)) + this.e_neighbour(i, j)) + this.w_neighbour(i, j)) + this.sw_neighbour(i, j)) + this.s_neighbour(i, j)) + this.se_neighbour(i, j))
}
  def kill(i : Int, j : Int) : Int = {
cells.assign(i, j, 0)
}
  def birth(i : Int, j : Int) : Int = {
cells.assign(i, j, 1)
}
}
class Game {
    var board : Board = null;
    var rows : Int = 0;
    var cols : Int = 0;
  def init() : Game = {
  var bitbucket : Int = 0;
  rows = 11;
cols = 40;
board = new Board().init(rows, cols);
bitbucket = board.birth(1, 2);
bitbucket = board.birth(2, 3);
bitbucket = board.birth(3, 1);
bitbucket = board.birth(3, 2);
bitbucket = board.birth(3, 3);
this
}
  def iterate() : Int = {
  var next : Board = null;
  var i : Int = 0;
  var j : Int = 0;
  var n : Int = 0;
  var bitbucket : Int = 0;
  next = new Board().init(rows, cols);
i = 1;
j = 1;
  while (i < rows || i == rows) {
    while (j < cols || j == cols) {
  n = board.neighbours(i, j);
  if (board.alive(i, j))
 {
    if ((n - 2) < 0 || (3 - n) < 0)
 bitbucket = next.kill(i, j)
   else
 bitbucket = next.birth(i, j)
  }
   else
 {
    if (n == 3)
 {
  bitbucket = next.birth(i, j)
  }
   else
 bitbucket = next.kill(i, j)
  };
j = (j + 1)
  };
i = (i + 1);
j = 1
  };
board = next;
(rows * cols)
}
  def print() : String = {
  var i : Int = 0;
  var j : Int = 0;
  var m : String = "";
  i = 1;
j = 1;
  while (i < rows || i == rows) {
    while (j < cols || j == cols) {
    if (board.alive(i, j))
 m = (m + "o")
   else
 m = (m + ".");
j = (j + 1)
  };
  println(m);
i = (i + 1);
m = "";
j = 1
  };
m
}
  def waitt() : Int = {
  var i : Int = 0;
  var bitbucket1 : Game = null;
  var bitbucket2 : Int = 0;
  bitbucket1 = new Game().init();
i = 0;
  while (i < 1000) {
  bitbucket2 = bitbucket1.iterate();
i = (i + 1)
  };
i
}
  def run(n : Int) : String = {
  var i : Int = 0;
  var bitbucket : Int = 0;
  i = 0;
  while (i < n) {
    println(this.print());
bitbucket = this.waitt();
bitbucket = this.iterate();
i = (i + 1)
  };
""
}
}
object Main extends App {
  println(new Game().init().run(10))
}
